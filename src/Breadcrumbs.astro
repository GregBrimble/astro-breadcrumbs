---
import { schemaJson } from "./lib/structuredData";
import { generateCrumbs } from "./lib/generateCrumbs";
import BreadcrumbLink from "./BreadcrumbLink.astro";
import BreadcrumbSeparator from "./BreadcrumbSeparator.astro";

export interface BreadcrumbsProps {
  indexText?: string;
  mainBemClass?: string;
  ariaLabel?: string;
  crumbs?: Array<BreadcrumbItem>;
  customizeLinks?: Array<CustomizeLink>;
  schemaJsonScript?: boolean;
  ellipsisAriaLabel?: string;
  truncated?: boolean;
  linkTextFormat?: "lower" | "capitalized" | "sentence";
  customBaseUrl?: string;
  excludeCurrentPage?: boolean;
  debug?: boolean;
}

interface CustomizeLink {
  "is-last"?: boolean;
  [key: string]: any; // Allows for any other properties
}

export interface BreadcrumbItem {
  text: string;
  href: string;
  "aria-current"?: string;
}

const {
  indexText = "Home",
  mainBemClass = "c-breadcrumbs",
  ariaLabel = "breadcrumbs",
  crumbs = [],
  customizeLinks = [],
  schemaJsonScript = true,
  ellipsisAriaLabel = "Show hidden navigation",
  truncated = false,
  linkTextFormat,
  customBaseUrl,
  excludeCurrentPage = false,
  debug = false,
} = Astro.props as BreadcrumbsProps;

const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);
const hasTrailingSlash = Astro.url.pathname.endsWith("/");
const pathLength = paths?.length;
const UUID = crypto.randomUUID();

const parts = generateCrumbs({
  crumbs,
  paths,
  indexText,
  hasTrailingSlash,
  linkTextFormat,
  customBaseUrl,
  excludeCurrentPage,
});

// Initialize mergedParts with parts to handle direct replacement scenarios
let mergedParts = [...parts];

// Track if a custom link with "is-last" has been applied to prevent index shift
let isLastApplied = false;

// Iterate over customizeLinks to apply customizations
customizeLinks.forEach((customLink, index) => {
  // Adjust index if "is-last" has been applied
  const adjustedIndex = isLastApplied ? index - 1 : index;

  // Check if customLink is meant to replace the last part
  if (customLink["is-last"]) {
    // Replace the last element of mergedParts with customLink, removing "is-last" property
    const { "is-last": _, ...restCustomLink } = customLink; // Destructure to exclude "is-last"
    mergedParts[mergedParts.length - 1] = {
      ...mergedParts[mergedParts.length - 1],
      ...restCustomLink,
    };
    isLastApplied = true; // Mark that "is-last" has been applied
  } else if (adjustedIndex < mergedParts.length) {
    // Merge based on adjusted index if not replacing the last element
    mergedParts[adjustedIndex] = {
      ...mergedParts[adjustedIndex],
      ...customLink,
    };
  }
  // If index is beyond the length of parts, the customLink is ignored
});

const isLastElement = (index: number, array: any[]) =>
  index + 1 === array.length;

if (debug) {
  console.log("__ autogenerated parts __");
  console.table(parts);
  console.log("__ final output __");
  console.table(mergedParts);
}
---

<astro-breadcrumbs
  data-main-bem-class={mainBemClass}
  data-id={UUID}
  data-path-length={pathLength}
  data-truncated={truncated}
>
  <nav aria-label={ariaLabel} class={mainBemClass} id={UUID}>
    <ol
      class={`${mainBemClass}__crumbs${
        Astro.slots.has("separator") ? " has-separators" : " has-no-separators"
      }`}
    >
      {
        mergedParts.map(({ text, ...attrs }, index, array) => {
          const lastElement = isLastElement(index, array);

          if (excludeCurrentPage && lastElement) {
            return null;
          }

          return (
            <>
              {index === 1 && pathLength > 1 && truncated && (
                <li class={`${mainBemClass}__crumb has-ellipsis`}>
                  <button
                    type="button"
                    aria-label={ellipsisAriaLabel}
                    class={`${mainBemClass}__truncated-button`}
                  >
                    <slot name="ellipsis">â€¦</slot>
                  </button>
                  <BreadcrumbSeparator>
                    <slot name="separator" slot="seperator" />
                  </BreadcrumbSeparator>
                </li>
              )}
              <li class={`${mainBemClass}__crumb`}>
                <BreadcrumbLink
                  attrs={attrs}
                  mainBemClass={mainBemClass}
                  isIndex={index === 0}
                  isCurrent={lastElement}
                >
                  {Astro.slots.has("index") && index === 0 ? (
                    <slot name="index" slot="index" />
                  ) : (
                    text
                  )}
                </BreadcrumbLink>

                {Astro.slots.has("separator") && !lastElement && (
                  <BreadcrumbSeparator>
                    <slot name="separator" slot="separator" />
                  </BreadcrumbSeparator>
                )}
              </li>
            </>
          );
        })
      }
    </ol>
  </nav>
</astro-breadcrumbs>
{
  schemaJsonScript && (
    <script type="application/ld+json" set:html={schemaJson(mergedParts)} />
  )
}

<script>
  import { Truncated } from "./lib/truncated";

  customElements.define("astro-breadcrumbs", Truncated);
</script>
