---
import { schemaJson } from "./lib/structuredData";
import { getBaseUrl, getFirstCrumb } from "./lib/crumbUtils";

export interface BreadcrumbsProps {
  indexText?: string;
  mainBemClass?: string;
  ariaLabel?: string;
  crumbs?: Array<BreadcrumbItem>;
  schemaJsonScript?: boolean;
  baseUrl?: string;
  trailingSlash?: boolean;
}

export interface BreadcrumbItem {
  text: string;
  href: string;
  "aria-current"?: string;
}

const {
  indexText = "Home",
  mainBemClass = "c-breadcrumbs",
  ariaLabel = "breadcrumbs",
  crumbs = [],
  schemaJsonScript = true,
  baseUrl,
  trailingSlash = false,
} = Astro.props as BreadcrumbsProps;

const hasBaseUrl = baseUrl?.length;

let parts: Array<BreadcrumbItem> = [];

/**
 * If no crumbs are passed, generate them dynamically.
 */
if (crumbs.length === 0) {
  const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);

  /**
   * Array of breadcrumb items.
   * The first item is the index page.
   */
  parts = [
    {
      text: indexText,
      href: getFirstCrumb(trailingSlash, baseUrl, hasBaseUrl),
    },
  ];

  /**
   * Loop through the paths and create a breadcrumb item for each.
   */
  paths.forEach((text: string, index: number) => {
    const generateHref = `/${paths.slice(0, index + 1).join("/")}`;
    const chooseBaseUrl = getBaseUrl(baseUrl, hasBaseUrl)
      ? getBaseUrl(baseUrl, hasBaseUrl) + generateHref
      : generateHref;
    const addTrailingSlash = trailingSlash
      ? `${chooseBaseUrl}/`
      : chooseBaseUrl;
    const finalHref = addTrailingSlash;

    // strip out any file extensions
    const matches = text.match(/^(.+?)(\.[a-z0-9]+)?$/i);

    if (matches && matches[2]) {
      text = matches[1];
    }

    parts = [
      ...parts,
      {
        text: text.replace(/[-_]/g, " "),
        href: finalHref,
      },
    ];
  });
}

/**
 * If crumbs are passed, use them.
 */
if (crumbs.length > 0) {
  parts = crumbs;
}
---

<nav aria-label={ariaLabel} class={mainBemClass}>
  <ol
    class={`${mainBemClass}__crumbs${
      Astro.slots.has("separator") ? " has-separators" : " has-no-separators"
    }`}
  >
    {
      parts.map(({ text, ...attrs }, index, array) => (
        <li class={`${mainBemClass}__crumb`}>
          {Astro.slots.has("index") && index === 0 && (
            <a {...attrs} class={`${mainBemClass}__link is-index`}>
              <slot name="index" />
            </a>
          )}

          {(!Astro.slots.has("index") ||
            (Astro.slots.has("index") && index !== 0)) && (
            <a
              {...attrs}
              class={`${mainBemClass}__link${
                index + 1 === array.length ? " is-current" : ""
              }`}
              aria-current={index + 1 === array.length ? "location" : false}
            >
              {text}
            </a>
          )}

          {Astro.slots.has("separator") && array.length - 1 !== index && (
            <span class="c-breadcrumbs__separator" aria-hidden="true">
              <slot name="separator" />
            </span>
          )}
        </li>
      ))
    }
  </ol>
</nav>
{
  schemaJsonScript && (
    <script type="application/ld+json" set:html={schemaJson(parts)} />
  )
}
