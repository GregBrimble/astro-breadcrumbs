---
import { schemaJson } from "./lib/structuredData";
import {
  generateCrumbs,
  mergeCustomizedLinks,
  customizeListElement,
} from "./lib/generateCrumbs";
import BreadcrumbLink from "./BreadcrumbLink.astro";
import BreadcrumbSeparator from "./BreadcrumbSeparator.astro";
import type { BreadcrumbsProps } from "./breadcrumbs.types.ts";
import { isLastElement } from "./lib/helper.ts";
import { debugInformation } from "./lib/debug.ts";

const {
  indexText = "Home",
  mainBemClass = "c-breadcrumbs",
  ariaLabel = "breadcrumbs",
  crumbs = [],
  customizeLinks = [],
  customizeListElements = [],
  schemaJsonScript = true,
  ellipsisAriaLabel = "Show hidden navigation",
  truncated = false,
  linkTextFormat,
  customBaseUrl,
  excludeCurrentPage = false,
  debug = false,
} = Astro.props as BreadcrumbsProps;

const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);
const hasTrailingSlash = Astro.url.pathname.endsWith("/");
const pathLength = paths?.length;
const UUID = crypto.randomUUID();

const parts = generateCrumbs({
  crumbs,
  paths,
  indexText,
  hasTrailingSlash,
  linkTextFormat,
  customBaseUrl,
  excludeCurrentPage,
});

const customizedParts = mergeCustomizedLinks(parts, customizeLinks);

debugInformation(debug, parts, customizedParts);
---

<astro-breadcrumbs
  data-main-bem-class={mainBemClass}
  data-id={UUID}
  data-path-length={pathLength}
  data-truncated={truncated}
>
  <nav aria-label={ariaLabel} class={mainBemClass} id={UUID}>
    <ol
      class={`${mainBemClass}__crumbs${
        Astro.slots.has("separator") ? " has-separators" : " has-no-separators"
      }`}
    >
      {
        customizedParts.map(({ text, ...attrs }, index, array) => {
          const lastElement = isLastElement(index, array);

          if (excludeCurrentPage && lastElement) {
            return null;
          }

          const showTruncatedButton =
            truncated && index === 1 && pathLength > 1;

          return (
            <>
              {showTruncatedButton && (
                <li
                  class={`${mainBemClass}__crumb has-ellipsis`}
                  {...customizeListElements[1]}
                >
                  <button
                    type="button"
                    aria-label={ellipsisAriaLabel}
                    class={`${mainBemClass}__truncated-button`}
                  >
                    <slot name="ellipsis">â€¦</slot>
                  </button>
                  <BreadcrumbSeparator>
                    <slot name="separator" slot="seperator" />
                  </BreadcrumbSeparator>
                </li>
              )}
              <li
                class={`${mainBemClass}__crumb`}
                {...customizeListElement(
                  index,
                  showTruncatedButton,
                  customizeListElements,
                )}
              >
                <BreadcrumbLink
                  attrs={attrs}
                  mainBemClass={mainBemClass}
                  isIndex={index === 0}
                  isCurrent={lastElement}
                >
                  {Astro.slots.has("index") && index === 0 ? (
                    <slot name="index" slot="index" />
                  ) : (
                    text
                  )}
                </BreadcrumbLink>

                {Astro.slots.has("separator") && !lastElement && (
                  <BreadcrumbSeparator>
                    <slot name="separator" slot="separator" />
                  </BreadcrumbSeparator>
                )}
              </li>
            </>
          );
        })
      }
    </ol>
  </nav>
</astro-breadcrumbs>
{
  schemaJsonScript && (
    <script type="application/ld+json" set:html={schemaJson(customizedParts)} />
  )
}

<script>
  import { Truncated } from "./lib/truncated";

  customElements.define("astro-breadcrumbs", Truncated);
</script>
