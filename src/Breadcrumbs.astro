---
import { schemaJson } from "./lib/structuredData";
import { generateCrumbs } from "./lib/generateCrumbs";

export interface BreadcrumbsProps {
  indexText?: string;
  mainBemClass?: string;
  ariaLabel?: string;
  crumbs?: Array<BreadcrumbItem>;
  schemaJsonScript?: boolean;
  baseUrl?: string;
  trailingSlash?: boolean;
  ellipsisAriaLabel?: string;
}

export interface BreadcrumbItem {
  text: string;
  href: string;
  "aria-current"?: string;
}

const {
  indexText = "Home",
  mainBemClass = "c-breadcrumbs",
  ariaLabel = "breadcrumbs",
  crumbs = [],
  schemaJsonScript = true,
  baseUrl,
  trailingSlash = false,
  ellipsisAriaLabel = "Show hidden navigation",
} = Astro.props as BreadcrumbsProps;

const hasBaseUrl = !!baseUrl?.length;
const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);
const pathLength = paths?.length;
const UUID = crypto.randomUUID();
console.log(paths);

const parts = generateCrumbs(
  baseUrl,
  crumbs,
  paths,
  hasBaseUrl,
  trailingSlash,
  indexText,
);
---

<astro-breadcrumbs
  data-main-bem-class={mainBemClass}
  data-id={UUID}
  data-path-length={pathLength}
>
  <nav aria-label={ariaLabel} class={mainBemClass} id={UUID}>
    <ol
      class={`${mainBemClass}__crumbs${
        Astro.slots.has("separator") ? " has-separators" : " has-no-separators"
      }`}
    >
      {
        parts.map(({ text, ...attrs }, index, array) => (
          <>
            {index === 1 && pathLength > 1 && (
              <li class={`${mainBemClass}__crumb has-truncated`}>
                <button
                  type="button"
                  aria-label={ellipsisAriaLabel}
                  class={`${mainBemClass}__truncated-button`}
                >
                  <slot name="ellipsis">â€¦</slot>
                </button>
                <span class="c-breadcrumbs__separator" aria-hidden="true">
                  <slot name="separator" />
                </span>
              </li>
            )}
            <li class={`${mainBemClass}__crumb`}>
              {Astro.slots.has("index") && index === 0 && (
                <a {...attrs} class={`${mainBemClass}__link is-index`}>
                  <slot name="index" />
                </a>
              )}

              {(!Astro.slots.has("index") ||
                (Astro.slots.has("index") && index !== 0)) && (
                <a
                  {...attrs}
                  class={`${mainBemClass}__link${
                    index + 1 === array.length ? " is-current" : ""
                  }`}
                  aria-current={index + 1 === array.length ? "location" : false}
                >
                  {text}
                </a>
              )}

              {Astro.slots.has("separator") && array.length - 1 !== index && (
                <span class="c-breadcrumbs__separator" aria-hidden="true">
                  <slot name="separator" />
                </span>
              )}
            </li>
          </>
        ))
      }
    </ol>
  </nav>
</astro-breadcrumbs>
{
  schemaJsonScript && (
    <script type="application/ld+json" set:html={schemaJson(parts)} />
  )
}

<script>
  class AstroBreadcrumbs extends HTMLElement {
    isManualToggle = false;
    breadcrumbs: HTMLElement | null = null;
    mainBemClass: string | null = null;

    constructor() {
      super();

      // Read the message from the data attribute.
      this.mainBemClass = this.dataset.mainBemClass || null;
      const id = this.dataset.id;

      if (!id) return;

      // Select the breadcrumbs element
      this.breadcrumbs = document.getElementById(id);

      // Select all the crumb elements
      const crumbs = this.breadcrumbs?.querySelectorAll(
        `.${this.mainBemClass}__crumb`,
      );

      // Calculate the average height of the crumb elements
      let totalHeight = 0;
      crumbs?.forEach((crumb) => {
        totalHeight += (crumb as HTMLElement).offsetHeight;
      });
      const averageHeight = totalHeight / (crumbs ? crumbs.length : 1);

      // Create a new ResizeObserver instance
      const resizeObserver = new ResizeObserver((entries) => {
        for (let entry of entries) {
          // Check if the breadcrumbs are overflowing
          if (entry.contentRect.width > entry.target.clientWidth) {
            console.warn("Breadcrumbs are overflowing");
          } else {
            console.log("Breadcrumbs are not overflowing");
          }

          // Check if the breadcrumbs are displayed on more than one line
          if (
            this.breadcrumbs &&
            this.breadcrumbs.clientHeight > averageHeight &&
            !this.isManualToggle
          ) {
            this.toggleTrunicated(true);
            console.warn("Breadcrumbs are displayed on more than one line");
          } else {
            this.toggleTrunicated(false);
            this.isManualToggle = false;
            console.log("Breadcrumbs are displayed on one line");
          }
        }
      });

      // Start observing the breadcrumbs element
      if (this.breadcrumbs) resizeObserver.observe(this.breadcrumbs);
    }

    connectedCallback() {
      this.showHiddenCrumbs();
    }

    /**
     * Toggle the visibility of the truncated crumb
     *
     * @param isTruncated
     */
    toggleTrunicated(isTruncated: boolean) {
      const truncatedCrumb = this.breadcrumbs?.querySelector(
        `.${this.mainBemClass}__crumb.has-truncated`,
      );

      if (isTruncated) {
        console.log("Truncated");
        truncatedCrumb?.classList.add("is-visible");
        this.breadcrumbs?.classList.add("is-truncated");
      } else {
        truncatedCrumb?.classList.remove("is-visible");
        this.breadcrumbs?.classList.remove("is-truncated");
        console.log("Not truncated");
      }
    }

    /**
     * Show the hidden crumbs when the truncated button is clicked
     */
    showHiddenCrumbs() {
      const truncatedButton = this.breadcrumbs?.querySelector(
        `.${this.mainBemClass}__truncated-button`,
      );

      truncatedButton?.addEventListener("click", () => {
        this.breadcrumbs?.classList.remove("is-truncated");
        this.isManualToggle = true;
      });
    }
  }

  customElements.define("astro-breadcrumbs", AstroBreadcrumbs);
</script>
