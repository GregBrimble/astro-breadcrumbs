---
interface BreadcrumbsProps {
  indexText?: string;
  mainBemClass?: string;
  ariaLabel?: string;
  crumbs?: Array<BreadcrumbItem>;
}

interface BreadcrumbItem {
  text: string;
  href: string;
  "aria-current"?: string;
}

const {
  indexText = "Home",
  mainBemClass = "c-breadcrumbs",
  ariaLabel = "breadcrumbs",
  crumbs = [],
} = Astro.props as BreadcrumbsProps;

let parts: Array<BreadcrumbItem> = [];

/**
 * If no crumbs are passed, generate them dynamically.
 */
if (crumbs.length === 0) {
  console.log("dynamic");

  const paths = Astro.url.pathname.split("/").filter((crumb: any) => crumb);

  /**
   * Array of breadcrumb items.
   * The first item is the index page.
   */
  parts = [
    {
      text: indexText,
      href: "/",
    },
  ];

  /**
   * Loop through the paths and create a breadcrumb item for each.
   */
  paths.forEach((text: string, index: number) => {
    const href = `/${paths.slice(0, index + 1).join("/")}`;

    parts = [
      ...parts,
      {
        text: text.replace(/[-_]/g, " "),
        href,
      },
    ];
  });
}

/**
 * If crumbs are passed, use them.
 */
if (crumbs.length > 0) {
  parts = crumbs;
}
---

<nav aria-label={ariaLabel} class={mainBemClass}>
  <ol class={`${mainBemClass}__crumbs`}>
    {
      parts.map(({ text, ...attrs }, index, array) => (
        <li class={`${mainBemClass}__crumb`}>
          {Astro.slots.has("index") && index === 0 && (
            <a {...attrs} class={`${mainBemClass}__link`}>
              <slot name="index" />
            </a>
          )}

          {(!Astro.slots.has("index") ||
            (Astro.slots.has("index") && index !== 0)) && (
            <a
              {...attrs}
              class={`${mainBemClass}__link`}
              aria-current={index + 1 === array.length ? "location" : false}
            >
              {text}
            </a>
          )}

          {Astro.slots.has("separator") && array.length - 1 !== index && (
            <slot name="separator" />
          )}
        </li>
      ))
    }
  </ol>
</nav>
